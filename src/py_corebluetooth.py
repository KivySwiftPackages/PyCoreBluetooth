from typing import Callable, Protocol

class PyCBCentralManager():
	peripherals: dict[str, "CBPeripheral"]

	def __init__(self, *args, **kwargs): ...

	def connect(self, peripheral: "CBPeripheral"): ...

	def disconnect(self, peripheral: "CBPeripheral"): ...

	def scan(self, services: list["CBUUID"] | None): ...

	def stop_scan(self): ...

class PyCBPeripheralCallback():
	def __init__(self, callback: "Callbacks"): ...

	class Callbacks(Protocol):
		def didOpen(self, peripheral: "CBPeripheral", channel: "CBL2CAPChannel | None", error: str | None): ...

		def didModifyServices(self, peripheral: "CBPeripheral", invalidatedServices: list["CBService"]): ...

		def didDiscoverServices(self, peripheral: "CBPeripheral", error: str | None): ...

		def didDiscoverDescriptors(self, peripheral: "CBPeripheral", characteristic: "CBCharacteristic", error: str | None): ...

		def didDiscoverCharacteristics(self, peripheral: "CBPeripheral", service: "CBService", error: str | None): ...

		def didUpdateNotificationState(self, peripheral: "CBPeripheral", characteristic: "CBCharacteristic", error: str | None): ...

		def didDiscoverIncludedServices(self, peripheral: "CBPeripheral", service: "CBService", error: str | None): ...

		def didUpdateName(self, peripheral: "CBPeripheral"): ...

		def didReadRSSI(self, peripheral: "CBPeripheral", RSSI: int, error: str | None): ...

		def didWriteCharacteristic(self, peripheral: "CBPeripheral", characteristic: "CBCharacteristic", error: str | None): ...

		def didWriteDescriptor(self, peripheral: "CBPeripheral", descriptor: "CBDescriptor", error: str | None): ...

		def didUpdateCharacteristic(self, peripheral: "CBPeripheral", characteristic: "CBCharacteristic", error: str | None): ...

		def didUpdateDescriptor(self, peripheral: "CBPeripheral", descriptor: "CBDescriptor", error: str | None): ...

		def isReady(self, peripheral: "CBPeripheral"): ...

class CBCentralManagerCallback():
	def __init__(self, callback: "Callbacks"): ...

	class Callbacks(Protocol):
		def didUpdateState(self, central: "CBCentralManager"): ...

		def didDiscover(self, peripheral: "CBPeripheral", RSSI: int): ...

		def didConnect(self, peripheral: "CBPeripheral"): ...

		def didDisconnectPeripheral(self, peripheral: "CBPeripheral", error: str | None): ...

class CBUUID():
	def create(self, string: str) -> "CBUUID": ...

class CBPeripheral():
	def get_delegate(self) -> object | None: ...

	def set_delegate(self, delegate: "PyCBPeripheralCallback | None"): ...

	def readValue(self, kwargs: dict[str, object]): ...

	def writeValue(self, kwargs: dict[str, object]): ...

	identifier: str

	name: str | None

	state: "CBPeripheralState"

	services: list["CBService"] | None

	canSendWriteWithoutResponse: bool

	ancsAuthorized: bool

	def readRSSI(self): ...

	def discoverServices(self, serviceUUIDs: list["CBUUID"] | None): ...

	def discoverIncludedServices(self, includedServiceUUIDs: list["CBUUID"] | None, service: "CBService"): ...

	def discoverCharacteristics(self, characteristicUUIDs: list["CBUUID"] | None, service: "CBService"): ...

	def maximumWriteValueLength(self, type: "CBCharacteristicWriteType") -> int: ...

	def setNotifyValue(self, enabled: bool, characteristic: "CBCharacteristic"): ...

	def discoverDescriptors(self, characteristic: "CBCharacteristic"): ...

	def openL2CAPChannel(self, PSM: "CBL2CAPPSM"): ...

class CBCharacteristic():
	uuid: "CBUUID"

	service: "CBService | None"

	value: bytes | None

	descriptors: list["CBDescriptor"] | None

	isBroadcasted: bool

	isNotifying: bool

class CBService():
	def create(self, uuid: str, primary: bool) -> "CBService": ...

	peripheral: "CBPeripheral | None"

	isPrimary: bool

	includedServices: list["CBService"] | None

	characteristics: list["CBCharacteristic"] | None

class CBDescriptor():
	characteristic: "CBCharacteristic | None"

class CBL2CAPChannel():
	psm: "CBL2CAPPSM"

class CBCentralManager():
	def __init__(self, *args, **kwargs): ...

	def scanForPeripherals(self, serviceUUIDs: list["CBUUID"] | None): ...

	def connect(self, peripheral: "CBPeripheral"): ...

	state: "CBManagerState"

	authorization: "CBManagerAuthorization"

	isScanning: bool

	def retrievePeripherals(self, identifiers: list[str]) -> list["CBPeripheral"]: ...

	def retrieveConnectedPeripherals(self, serviceUUIDs: list["CBUUID"]) -> list["CBPeripheral"]: ...

	def stopScan(self): ...

	def cancelPeripheralConnection(self, peripheral: "CBPeripheral"): ...